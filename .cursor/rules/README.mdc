---
description: 
globs: 
alwaysApply: true
---
# 校园AI智能助手 - 规则文档索引

## 规则文件概览

本项目的开发规则已拆分为多个专门化的规则文件，每个文件负责特定领域的规范和指导。

### 规则文件列表

| 规则文件 | 主要内容 | 适用阶段 |
|---------|----------|----------|
| **[project-overview.mdc](mdc:project-overview.mdc)** | 项目概述、目标定义、总体架构 | 项目启动、架构设计 |
| **[coding-standards.mdc](mdc:coding-standards.mdc)** | 代码编写规范、MVP架构实现 | 开发实施阶段 |
| **[ui-design-rules.mdc](mdc:ui-design-rules.mdc)** | UI设计规范、Material Design | 界面设计、交互设计 |
| **[feature-modules.mdc](mdc:feature-modules.mdc)** | 功能模块详细设计和规范 | 功能开发阶段 |
| **[data-storage-rules.mdc](mdc:data-storage-rules.mdc)** | 数据模型、存储方案设计 | 数据层开发 |
| **[testing-quality.mdc](mdc:testing-quality.mdc)** | 测试策略、质量保证规范 | 测试和质量控制 |

### 使用指南

#### 项目启动阶段
1. 首先阅读 **项目总体规则** 了解项目概述和目标
2. 参考 **代码开发规范** 设置开发环境和技术栈

#### 设计阶段
1. 参考 **UI设计规范** 制定界面设计方案
2. 根据 **功能模块规范** 设计各模块接口和交互
3. 参考 **数据存储规范** 设计数据模型和存储结构

#### 开发阶段
1. 严格遵循 **代码开发规范** 进行编码
2. 按照 **功能模块规范** 实现各模块功能
3. 根据 **数据存储规范** 实现数据持久化

#### 测试阶段
1. 参考 **测试与质量规范** 编写测试用例
2. 执行单元测试、集成测试和UI测试
3. 进行性能测试和质量检查

### 规则文件相互关系

```
project-overview.mdc (总体指导)
       │
       ├── coding-standards.mdc (技术实现)
       ├── ui-design-rules.mdc (界面设计)  
       ├── feature-modules.mdc (功能设计)
       ├── data-storage-rules.mdc (数据设计)
       └── testing-quality.mdc (质量保证)
```

### 注意事项

1. **规则一致性**: 所有规则文件遵循统一的项目目标和技术架构
2. **规则更新**: 当项目需求变化时，需要同步更新相关规则文件
3. **规则执行**: 开发过程中应严格遵循相应规则文件的指导
4. **规则参考**: 每个规则文件都包含相关规则文件的交叉引用

### 快速导航

- **项目启动**: [project-overview.mdc](mdc:project-overview.mdc)
- **代码开发**: [coding-standards.mdc](mdc:coding-standards.mdc)  
- **界面设计**: [ui-design-rules.mdc](mdc:ui-design-rules.mdc)
- **功能实现**: [feature-modules.mdc](mdc:feature-modules.mdc)
- **数据处理**: [data-storage-rules.mdc](mdc:data-storage-rules.mdc)
- **测试质量**: [testing-quality.mdc](mdc:testing-quality.mdc)

---

**版本**: v1.0  
**最后更新**: 2025年1月 
**维护者**: 项目开发团队
